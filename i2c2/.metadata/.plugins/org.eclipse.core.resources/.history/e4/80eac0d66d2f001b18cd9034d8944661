
/*******************************************************************************
 * INCLUDE HEADER FILES
 ******************************************************************************/

#include "i2c.h"
#include "board.h"


/*******************************************************************************
 * CONSTANT AND MACRO DEFINITIONS USING #DEFINE
 ******************************************************************************/
#define TIMEOUT		100

#define I2C_GET_IRQ_FLAG         			(i2c->S & I2C_S_IICIF_MASK)
#define I2C_CLEAR_IRQ_FLAG       			(i2c->S |= I2C_S_IICIF_MASK)
#define I2C_SET_TX_MODE          			(i2c->C1 |= I2C_C1_TX_MASK)
#define I2C_SET_RX_MODE          			(i2c->C1 &= ~I2C_C1_TX_MASK)
#define I2C_START_SIGNAL         			(i2c->C1 |= I2C_C1_MST_MASK) //generates start signal
#define I2C_REPEAT_START_SIGNAL  			(i2c->C1 |= I2C_C1_RSTA_MASK) //generetes repeated start signal
#define I2C_STOP_SIGNAL          			(i2c->C1 &= ~I2C_C1_MST_MASK)//generetes stop signal
#define I2C_SLAVE_ADDRESS_R(slave_addr)		((i2c_com->slave_addr << 1) | 0b00000001)
#define I2C_SLAVE_ADDRESS_W(slave_addr)		((i2c_com->slave_addr << 1) & 0b11111110)
#define I2C_WRITE_BYTE(data)     			(i2c->D = data) //Write data for transfer
#define I2C_READ_BYTE            			(i2c->D)
#define I2C_GET_RX_ACK			 			(i2c->S & I2C_S_RXAK_MASK)
#define I2C_SET_NACK	         			(i2c->C1 |= I2C_C1_TXAK_MASK)
#define I2C_CLEAR_NACK      				(i2c->C1 &= ~I2C_C1_TXAK_MASK)
#define I2C_BUS_STATE		  	 			(i2c->S & I2C_S_BUSY_MASK)
#define I2C_GET_TCF				 			(i2c->S & I2C_S_TCF_MASK)


/*******************************************************************************
 * VARIABLE PROTOTYPES WITH GLOBAL SCOPE
 ******************************************************************************/
static I2C_STATE state;
static I2C_MODE mode;
static uint8_t device_address_r;
static uint8_t device_address_w;
static uint8_t data_index;
static I2C_Type* i2cPtrs [] = I2C_BASE_PTRS;
static uint32_t simMasks[] = {SIM_SCGC4_I2C0_MASK, SIM_SCGC4_I2C1_MASK, SIM_SCGC1_I2C2_MASK};
static IRQn_Type i2c_irqs[] = I2C_IRQS;
static I2C_Type* i2c;
static I2C_COM_CONTROL * i2c_com;
static I2C_ChannelType channel_;

/*******************************************************************************
 * FUNCTION PROTOTYPES FOR PRIVATE FUNCTIONS WITH FILE LEVEL SCOPE
 ******************************************************************************/
void I2C_Handler(void);
static void I2C_StartCommunication(I2C_COM_CONTROL * i2c_comm);
static void I2C_EndCommunication(I2C_FAULT fault);



/*******************************************************************************
 *******************************************************************************
                        GLOBAL FUNCTION DEFINITIONS
 *******************************************************************************
 ******************************************************************************/

void I2C_Init(I2C_ChannelType channel)
{
	SIM_Type* sim_ptr = SIM;
	PORT_Type * portsPtrs [] = PORT_BASE_PTRS;
	i2c = i2cPtrs[channel];
	channel_ = channel;
	PORT_Type * port_SDA;
	uint32_t pin_SDA;
	PORT_Type * port_SCL;
	uint32_t pin_SCL;
	switch(channel)
	{
	case I2C_0:
		port_SDA = portsPtrs[PIN2PORT(I2C0_SDA)];
		pin_SDA = PIN2NUM(I2C0_SDA);
		port_SCL = portsPtrs[PIN2PORT(I2C0_SCL)];
		pin_SCL = PIN2NUM(I2C0_SCL);
		sim_ptr->SCGC5 |= SIM_SCGC5_PORTE_MASK;
		sim_ptr->SCGC4 |= simMasks[channel]; 		// Clock gating
		port_SDA->PCR[pin_SDA] |= PORT_PCR_MUX(5); 	// I2C alternative
		port_SCL->PCR[pin_SCL] |= PORT_PCR_MUX(5);	// I2C alternative
		break;
	case I2C_1:
		port_SDA = portsPtrs[PIN2PORT(I2C1_SDA)];
		pin_SDA = PIN2NUM(I2C1_SDA);
		port_SCL = portsPtrs[PIN2PORT(I2C1_SCL)];
		pin_SCL = PIN2NUM(I2C1_SCL);
		sim_ptr->SCGC5 |= SIM_SCGC5_PORTC_MASK;
		sim_ptr->SCGC4 |= simMasks[channel]; 		// Clock gating
		port_SDA->PCR[pin_SDA] |= PORT_PCR_MUX(6); 	// I2C alternative
		port_SCL->PCR[pin_SCL] |= PORT_PCR_MUX(6);	// I2C alternative
		break;
	case I2C_2:
		port_SDA = portsPtrs[PIN2PORT(I2C2_SDA)];
		pin_SDA = PIN2NUM(I2C2_SDA);
		port_SCL = portsPtrs[PIN2PORT(I2C2_SCL)];
		pin_SCL = PIN2NUM(I2C2_SCL);
		sim_ptr->SCGC5 |= SIM_SCGC5_PORTA_MASK;
		sim_ptr->SCGC1 |= simMasks[channel]; 		//clock gating
		port_SDA->PCR[pin_SDA] |= PORT_PCR_MUX(5); 	// I2C alternative
		port_SCL->PCR[pin_SCL] |= PORT_PCR_MUX(5);	// I2C alternative
		break;
	}
	 port_SDA->PCR[pin_SDA] |= PORT_PCR_ODE_MASK;
	 port_SCL->PCR[pin_SCL] |= PORT_PCR_ODE_MASK;
	 i2c->C1 = 0x00;
	 i2c->C1 |= I2C_C1_IICEN_MASK; 					// Enables I2C module operation
	 i2c->C1 |= I2C_C1_IICIE_MASK; 					// Enables I2C interrupt requests
	 i2c->S = I2C_S_TCF_MASK | I2C_S_IICIF_MASK;
	 i2c->F = I2C_F_MULT(0) | I2C_F_ICR(0); 		// I2C baud rate
	 NVIC_EnableIRQ(i2c_irqs[channel]);
}


void I2C_WriteMsg(I2C_COM_CONTROL * i2c_comm)
{
	mode = I2C_W;
	I2C_StartCommunication(i2c_comm);
}


void I2C_ReadMsg(I2C_COM_CONTROL * i2c_comm)
{
	mode =  I2C_R;
	I2C_StartCommunication(i2c_comm);
}


I2C_FAULT i2cWriteMsgBlocking (uint8_t * msg, uint8_t data_size,uint8_t register_address, uint8_t slave_address)
{
	NVIC_DisableIRQ(i2c_irqs[channel_]);

	I2C_FAULT fault = I2C_NO_FAULT;

	unsigned timeout = TIMEOUT;	// Use timeout for blocking communications

	if(I2C_BUS_STATE != I2C_BUS_BUSY)
	{
		device_address_w = (slave_address << 1) & 0b11111110;
		data_index = 0;

		i2c->C1 |= I2C_C1_TX_MASK; // Transmit Mode Select (TRANSMIT)
		i2c->C1 |= I2C_C1_MST_MASK; // Master Mode Select (MASTER)
		I2C_WRITE_BYTE(device_address_w);

		while(I2C_GET_TCF == false)
		{
			timeout--;
			if(timeout == 0)
			{
				I2C_STOP_SIGNAL;
				fault = I2C_TIMEOUT;
			}
		}

		if(I2C_GET_RX_ACK == 0 && fault == I2C_NO_FAULT)
		{

			I2C_WRITE_BYTE(register_address);

			while( I2C_GET_TCF == false )
			{
				timeout--;
				if(timeout == 0)
				{
					I2C_STOP_SIGNAL;
					fault = I2C_TIMEOUT;
				}
			}

			while((data_index <= data_size) && (fault == I2C_NO_FAULT))
			{
				if(I2C_GET_RX_ACK == 0 && fault == I2C_NO_FAULT)
				{
					if(data_index == data_size)
					{
						I2C_STOP_SIGNAL;
					}
					else
					{
						I2C_WRITE_BYTE(msg[data_index]);


						while(I2C_GET_TCF == false)
						{
							timeout--;
							if(timeout == 0)
							{
								fault = I2C_TIMEOUT;
							}
						}
					}

					data_index++;
				}
				else
				{
					I2C_STOP_SIGNAL;
					fault = I2C_SLAVE_ERROR;
				}

			}

		}
		else
		{
			I2C_STOP_SIGNAL;
			fault =  I2C_SLAVE_ERROR;
		}

	}
	else
	{
		return I2C_BUS_BUSY;
	}

	while(I2C_BUS_STATE == I2C_BUS_BUSY)
	{
		//STOP
	};

	NVIC_EnableIRQ(i2c_irqs[channel_]);
	return I2C_NO_FAULT;

}




I2C_FAULT i2cReadMsgBlocking (uint8_t * buffer, uint8_t data_size,	uint8_t register_address, uint8_t slave_address )
{
	NVIC_DisableIRQ(i2c_irqs[channel_]);

	I2C_FAULT fault = I2C_NO_FAULT;

	unsigned timeout = TIMEOUT;	// Use timeout for blocking communications

	if(I2C_BUS_STATE != I2C_BUS_BUSY)
	{

		device_address_r = (slave_address << 1) | 0b00000001;
		device_address_w = (slave_address << 1) & 0b11111110;
		data_index = 0;

		i2c->C1 |= I2C_C1_TX_MASK; // Transmit Mode Select (TRANSMIT)
		i2c->C1 |= I2C_C1_MST_MASK; // Master Mode Select (MASTER)
		I2C_WRITE_BYTE(device_address_w);

		while(I2C_GET_TCF == false)
		{
			timeout--;
			if(timeout == 0)
			{
				I2C_STOP_SIGNAL;
				fault = I2C_TIMEOUT;
			}
		}

		if(I2C_GET_RX_ACK == 0 && fault == I2C_NO_FAULT)
		{

			I2C_WRITE_BYTE(register_address);

			while( I2C_GET_TCF == false )
			{
				timeout--;
				if(timeout == 0)
				{
					I2C_STOP_SIGNAL;
					fault = I2C_TIMEOUT;
				}
			}
			if((I2C_GET_RX_ACK) == 0 && fault == I2C_NO_FAULT)
			{

				I2C_REPEAT_START_SIGNAL;
				I2C_WRITE_BYTE(device_address_r);
				while( I2C_GET_TCF == false)
				{
					timeout--;
					if(timeout == 0)
					{
						I2C_STOP_SIGNAL;
						fault = I2C_TIMEOUT;
					}
				}
				if(I2C_GET_RX_ACK == 0 && fault == I2C_NO_FAULT)
				{
					for (int i = 100; i>0; i--){};

					I2C_SET_RX_MODE;

					if(data_index == data_size-1) //voy a leer mi último dato
					{
						I2C_SET_NACK;
					}
					uint8_t dummy_data = I2C_READ_BYTE;

					while( I2C_GET_TCF == false )
					{
						timeout--;
						if(timeout == 0)
						{
							I2C_STOP_SIGNAL;
							fault = I2C_TIMEOUT;
						}

					}

					if(fault == I2C_NO_FAULT)
					{
						while(data_index < data_size)
						{
							if(data_index == data_size-1)
							{
								I2C_STOP_SIGNAL;
								I2C_CLEAR_NACK;
								buffer[data_index] = I2C_READ_BYTE;
							}

							else
							{
								if(data_index == data_size-2) //voy a leer mi último dato
								{
									I2C_SET_NACK;
								}

								buffer[data_index] = I2C_READ_BYTE;
								while(I2C_GET_TCF == false)
								{
									timeout--;
									if(timeout == 0)
									{
										return I2C_TIMEOUT;
									}
								}
							}

							data_index++;
						}
					}


				}
				else
				{
					I2C_STOP_SIGNAL;
					fault = I2C_SLAVE_ERROR;
				}


			}

			else
			{
				I2C_STOP_SIGNAL;
				fault = I2C_SLAVE_ERROR;
			}
		}
		else
		{
			I2C_STOP_SIGNAL;
			fault =  I2C_SLAVE_ERROR;
		}

	}
	else
	{
		return I2C_BUS_BUSY;
	}

	while(I2C_BUS_STATE == I2C_BUS_BUSY)
	{
		//STOP
	};

	NVIC_EnableIRQ(i2c_irqs[channel_]);

	return I2C_NO_FAULT;

}


/*******************************************************************************
 *******************************************************************************
                        LOCAL FUNCTIONS DEFINITIONS
 *******************************************************************************
 ******************************************************************************/

void I2C_StartCommunication(I2C_COM_CONTROL * i2c_comm)
{
	if(I2C_BUS_STATE != I2C_BUS_BUSY)
	{
		i2c_com = i2c_comm;
		device_address_r = I2C_SLAVE_ADDRESS_R(slave_address);//(i2c_com->slave_address << 1) | 0b00000001;
		device_address_w = I2C_SLAVE_ADDRESS_W(slave_address);//(i2c_com->slave_address << 1) & 0b11111110;
		data_index = 0;
		i2c_com->fault = I2C_NO_FAULT;
		state =  I2C_W_REG_ADDR;
		I2C_SET_TX_MODE;//i2c->C1 |= I2C_C1_TX_MASK; // Transmit Mode Select (TRANSMIT)
		I2C_START_SIGNAL;//i2c->C1 |= I2C_C1_MST_MASK; // Master Mode Select (MASTER) //START signal
		I2C_WRITE_BYTE(device_address_w);
	}
	else
	{
		i2c_comm->fault = I2C_BUS_BUSY;
		i2c_comm->callback();
	}
	return;
}


void I2C_EndCommunication(I2C_FAULT fault)
{
	I2C_STOP_SIGNAL;
	i2c_com->fault = fault;
	if ((mode == I2C_R) & (fault == I2C_NO_FAULT))
	{
		I2C_CLEAR_NACK;
		i2c_com->data[data_index] = I2C_READ_BYTE;
	}
	i2c_com->callback();
	state = I2C_STATE_NONE;
}


/*******************************************************************************
 *******************************************************************************
                        		IRQ HANDLERS
 *******************************************************************************
 ******************************************************************************/

void I2C0_IRQHandler(void)
{
	I2C_Handler();
}

void I2C1_IRQHandler(void)
{
	I2C_Handler();
}

void I2C2_IRQHandler(void)
{
	I2C_Handler();
}

void I2C_Handler(void)
{
	I2C_CLEAR_IRQ_FLAG;
	uint8_t dummy_data;

	if(mode == I2C_W)
	{
		switch(state)
		{
		case I2C_W_REG_ADDR:
			if(I2C_GET_RX_ACK == 0)// me llego un ACK
			{
				I2C_WRITE_BYTE(i2c_com->register_address);
				state = I2C_W_DATA;
			}
			else
			{
				I2C_EndCommunication(I2C_SLAVE_ERROR);
			}
			break;
		case I2C_W_DATA:
			if(I2C_GET_RX_ACK == 0)// me llego un ACK
			{
				if(data_index == i2c_com->data_size)
				{
					I2C_EndCommunication(I2C_NO_FAULT);
				}
				else
				{
					I2C_WRITE_BYTE(i2c_com->data[data_index]);
					data_index++;
				}
			}
			else
			{
				I2C_EndCommunication(I2C_SLAVE_ERROR);
			}
			break;
		default:
			break;
		}
	}
	else if (mode == I2C_R)
	{
		switch(state)
		{
		case I2C_W_REG_ADDR:
			if(I2C_GET_RX_ACK == 0)// me llego un ACK
			{
				I2C_WRITE_BYTE(i2c_com->register_address);
				state = I2C_W_DEV_ADDR_R;
			}
			else
			{
				I2C_EndCommunication(I2C_SLAVE_ERROR);
			}
			break;
		case I2C_W_DEV_ADDR_R:
			if(I2C_GET_RX_ACK == 0)// me llego un ACK
			{
				I2C_REPEAT_START_SIGNAL;
				I2C_WRITE_BYTE(device_address_r);
				state = I2C_R_DUMMY_DATA;
			}
			else
			{
				I2C_EndCommunication(I2C_SLAVE_ERROR);
			}
			break;
		case I2C_R_DUMMY_DATA:
			if(I2C_GET_RX_ACK == 0)// me llego un ACK
			{
				I2C_SET_RX_MODE;
				if(data_index == i2c_com->data_size-1) //voy a leer mi último dato
				{
					I2C_SET_NACK;
				}
				dummy_data = I2C_READ_BYTE;
				state = I2C_R_DATA;
			}
			else
			{
				I2C_EndCommunication(I2C_SLAVE_ERROR);
			}
			break;
		case I2C_R_DATA:
			if(data_index == i2c_com->data_size-1)
			{
				I2C_EndCommunication(I2C_NO_FAULT);
			}
			else
			{
				if(data_index == i2c_com->data_size-2) //voy a leer mi último dato
				{
					I2C_SET_NACK;
				}
			i2c_com->data[data_index] = I2C_READ_BYTE;
			data_index++;
			}
			break;
		default:
			break;
		}
	}
}

